generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model App {
  id          String   @id @default(uuid())
  name        String
  api_key     String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  customers           Customer[]
  subscriptions       Subscription[]
  payments            Payment[]
  usage               Usage[]
  audit_logs          AuditLog[]
  grace_periods       GracePeriod[]
  quota_plans         QuotaPlan[]
  subscription_plans  SubscriptionPlan[]
  
  @@map("apps")
}

model Customer {
  id                    String   @id @default(uuid())
  app_id                String
  stripe_customer_id    String   @unique
  email                 String
  name                  String?
  metadata              Json?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  app           App            @relation(fields: [app_id], references: [id])
  subscriptions Subscription[]
  payments      Payment[]
  usage         Usage[]
  grace_periods GracePeriod[]
  
  @@map("customers")
}

model Subscription {
  id                      String    @id @default(uuid())
  app_id                  String
  customer_id             String
  subscription_plan_id    String?   // Links to the plan template they selected
  stripe_subscription_id  String    @unique
  status                  String
  price_id                String
  quantity                Int       @default(1)
  quota_plan_id           String?   // Optional - links subscription to quota plan
  trial_start             DateTime?
  trial_end               DateTime?
  current_period_start    DateTime
  current_period_end      DateTime
  cancel_at_period_end    Boolean   @default(false)
  metadata                Json?
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  
  app                App               @relation(fields: [app_id], references: [id])
  customer           Customer          @relation(fields: [customer_id], references: [id])
  subscription_plan  SubscriptionPlan? @relation(fields: [subscription_plan_id], references: [id])
  quota_plan         QuotaPlan?        @relation(fields: [quota_plan_id], references: [id])
  payments           Payment[]
  usage              Usage[]
  
  @@map("subscriptions")
}

model Payment {
  id                String        @id @default(uuid())
  app_id            String
  customer_id       String
  subscription_id   String?
  stripe_payment_id String        @unique
  amount            Int
  currency          String
  status            String
  payment_method    String
  description       String?
  metadata          Json?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  
  app          App           @relation(fields: [app_id], references: [id])
  customer     Customer      @relation(fields: [customer_id], references: [id])
  subscription Subscription? @relation(fields: [subscription_id], references: [id])
  
  @@map("payments")
}

model Usage {
  id              String   @id @default(uuid())
  app_id          String
  customer_id     String
  subscription_id String?
  quota_plan_id   String?
  
  metric_name     String   // "api_calls", "storage_gb", "users"
  quantity        Int      // Amount used in this single call/event
  timestamp       DateTime // When this usage occurred
  
  
  // Carry-over tracking
  carried_over_from_period String? // Previous period ID if this is carried over quota
  
  metadata        Json?
  created_at      DateTime @default(now())
  
  // Relationships
  app          App           @relation(fields: [app_id], references: [id])
  customer     Customer      @relation(fields: [customer_id], references: [id])
  subscription Subscription? @relation(fields: [subscription_id], references: [id])
  quota_plan   QuotaPlan?    @relation(fields: [quota_plan_id], references: [id])
  
  // Indexes for efficient quota checking (database-level performance)
  @@index([customer_id, metric_name, timestamp])
  @@index([subscription_id, metric_name, timestamp])
  @@index([quota_plan_id, metric_name, timestamp])
  @@index([app_id, timestamp])
  
  @@map("usage")
}

model GracePeriod {
  id          String   @id @default(uuid())
  app_id      String
  customer_id String
  reason      String
  start_date  DateTime
  end_date    DateTime
  status      String   @default("active")
  metadata    Json?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  app      App      @relation(fields: [app_id], references: [id])
  customer Customer @relation(fields: [customer_id], references: [id])
  
  @@map("grace_periods")
}

model AuditLog {
  id               String   @id @default(uuid())
  app_id           String
  actor_id         String
  action_type      String
  target_type      String
  target_id        String
  payload_snapshot Json
  created_at       DateTime @default(now())
  
  app App @relation(fields: [app_id], references: [id])
  
  @@map("audit_logs")
}

model QuotaPlan {
  id             String   @id @default(uuid())
  app_id         String
  name           String
  description    String?
  billing_type   String   // "subscription", "usage", "hybrid"
  quotas         Json     // { "api_calls": 1000, "storage_gb": 5, "users": 10 }
  overage_rates  Json?    // { "api_calls": 0.001, "storage_gb": 0.10 }
  reset_period   String   // "monthly", "yearly", "none"
  carry_over     Boolean  @default(false) // Allow unused quota to carry over
  max_carry_over Json?    // { "api_calls": 500 } - max carry-over per metric
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  
  app                 App                @relation(fields: [app_id], references: [id])
  usage               Usage[]
  subscriptions       Subscription[]     // Multiple subscriptions can use the same quota plan
  subscription_plans  SubscriptionPlan[] // Multiple plans can use the same quota plan
  
  @@map("quota_plans")
}

// Subscription Plan Templates - What users see and compare before subscribing
model SubscriptionPlan {
  id              String   @id @default(uuid())
  app_id          String
  name            String   // "Starter", "Professional", "Enterprise"
  description     String?  // "Perfect for small teams"
  slug            String   // "starter", "pro", "enterprise" - for URLs
  
  // Pricing
  base_price      Int      // Price in cents
  currency        String   @default("usd")
  billing_period  String   // "monthly", "yearly"
  
  // Stripe integration
  stripe_price_id String?  // Links to Stripe Price object
  stripe_product_id String? // Links to Stripe Product object
  
  // Plan configuration
  quota_plan_id   String?  // Links to quota limits
  trial_days      Int?     // Free trial period
  setup_fee       Int?     // One-time setup fee in cents
  
  // Display and marketing
  is_popular      Boolean  @default(false) // Show "Most Popular" badge
  is_featured     Boolean  @default(false) // Feature in marketing
  display_order   Int      @default(0)     // Sort order for display
  
  // Status
  is_active       Boolean  @default(true)  // Available for new subscriptions
  is_public       Boolean  @default(true)  // Visible to customers
  
  metadata        Json?    // Custom fields, marketing copy, etc.
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  // Relationships
  app            App            @relation(fields: [app_id], references: [id])
  quota_plan     QuotaPlan?     @relation(fields: [quota_plan_id], references: [id])
  subscriptions  Subscription[] // Active subscriptions using this plan
  
  @@unique([app_id, slug])
  @@map("subscription_plans")
}


